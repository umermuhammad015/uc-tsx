
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.1.0
 * Query Engine version: 11f085a2012c0f4778414c8db2651556ee0ef959
 */
Prisma.prismaVersion = {
  client: "6.1.0",
  engine: "11f085a2012c0f4778414c8db2651556ee0ef959"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  contact: 'contact',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BuildingsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  city: 'city',
  status: 'status',
  is_centrally_air_conditioned: 'is_centrally_air_conditioned',
  has_security: 'has_security',
  has_escalators: 'has_escalators',
  has_food_court: 'has_food_court',
  has_entertainment_area: 'has_entertainment_area',
  has_none: 'has_none',
  type_mixed_use: 'type_mixed_use',
  type_retail: 'type_retail',
  type_offices: 'type_offices',
  type_apartments: 'type_apartments',
  type_other: 'type_other',
  zone: 'zone',
  area: 'area',
  address: 'address',
  plot_size: 'plot_size',
  construction_area: 'construction_area',
  construction_year: 'construction_year',
  launch_year: 'launch_year',
  builder_name: 'builder_name',
  building_rank: 'building_rank',
  total_floors: 'total_floors',
  parking_floors: 'parking_floors',
  apartment_floors: 'apartment_floors',
  apartments_count: 'apartments_count',
  apartments_studio: 'apartments_studio',
  apartments_has_type_1_bed: 'apartments_has_type_1_bed',
  apartments_has_type_2_bed: 'apartments_has_type_2_bed',
  apartments_has_type_3_bed: 'apartments_has_type_3_bed',
  apartments_has_type_4_bed: 'apartments_has_type_4_bed',
  apartments_has_type_5_bed: 'apartments_has_type_5_bed',
  apartments_has_type_duplex: 'apartments_has_type_duplex',
  apartments_has_type_penthouse: 'apartments_has_type_penthouse',
  apartments_has_servant_quarter: 'apartments_has_servant_quarter',
  has_furnished: 'has_furnished',
  has_semi_furnished: 'has_semi_furnished',
  has_service_apartments: 'has_service_apartments',
  has_hotel_suites_apartments: 'has_hotel_suites_apartments',
  apartments_maintenance_fee: 'apartments_maintenance_fee',
  retail_floors_count: 'retail_floors_count',
  retail_floors_shops_count: 'retail_floors_shops_count',
  retail_floors_maintenance_fee: 'retail_floors_maintenance_fee',
  retail_floors_brands: 'retail_floors_brands',
  has_fashion_health: 'has_fashion_health',
  has_electronics_appliancecs: 'has_electronics_appliancecs',
  has_home_living: 'has_home_living',
  has_restaurants_courts: 'has_restaurants_courts',
  has_bakery_ice: 'has_bakery_ice',
  has_grocery_supermarkets: 'has_grocery_supermarkets',
  has_banks_atm: 'has_banks_atm',
  has_real_estate: 'has_real_estate',
  has_labs_pharmacies: 'has_labs_pharmacies',
  has_play_fitness: 'has_play_fitness',
  has_swimming_pool: 'has_swimming_pool',
  has_cinema: 'has_cinema',
  office_floors_count: 'office_floors_count',
  offices_count: 'offices_count',
  office_maintenance_fee: 'office_maintenance_fee',
  survey_date: 'survey_date',
  surveyor_name: 'surveyor_name',
  building_survery_remarks: 'building_survery_remarks',
  building_draft: 'building_draft',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Buildings_historyScalarFieldEnum = {
  id: 'id',
  building_id: 'building_id',
  name: 'name',
  city: 'city',
  status: 'status',
  is_centrally_air_conditioned: 'is_centrally_air_conditioned',
  has_security: 'has_security',
  has_escalators: 'has_escalators',
  has_food_court: 'has_food_court',
  has_entertainment_area: 'has_entertainment_area',
  has_none: 'has_none',
  type_mixed_use: 'type_mixed_use',
  type_retail: 'type_retail',
  type_offices: 'type_offices',
  type_apartments: 'type_apartments',
  type_other: 'type_other',
  zone: 'zone',
  area: 'area',
  address: 'address',
  plot_size: 'plot_size',
  construction_area: 'construction_area',
  construction_year: 'construction_year',
  launch_year: 'launch_year',
  builder_name: 'builder_name',
  building_rank: 'building_rank',
  total_floors: 'total_floors',
  parking_floors: 'parking_floors',
  apartment_floors: 'apartment_floors',
  apartments_count: 'apartments_count',
  apartments_studio: 'apartments_studio',
  apartments_has_type_1_bed: 'apartments_has_type_1_bed',
  apartments_has_type_2_bed: 'apartments_has_type_2_bed',
  apartments_has_type_3_bed: 'apartments_has_type_3_bed',
  apartments_has_type_4_bed: 'apartments_has_type_4_bed',
  apartments_has_type_5_bed: 'apartments_has_type_5_bed',
  apartments_has_type_duplex: 'apartments_has_type_duplex',
  apartments_has_type_penthouse: 'apartments_has_type_penthouse',
  apartments_has_servant_quarter: 'apartments_has_servant_quarter',
  has_furnished: 'has_furnished',
  has_semi_furnished: 'has_semi_furnished',
  has_service_apartments: 'has_service_apartments',
  has_hotel_suites_apartments: 'has_hotel_suites_apartments',
  apartments_maintenance_fee: 'apartments_maintenance_fee',
  retail_floors_count: 'retail_floors_count',
  retail_floors_shops_count: 'retail_floors_shops_count',
  retail_floors_maintenance_fee: 'retail_floors_maintenance_fee',
  retail_floors_brands: 'retail_floors_brands',
  has_fashion_health: 'has_fashion_health',
  has_electronics_appliancecs: 'has_electronics_appliancecs',
  has_home_living: 'has_home_living',
  has_restaurants_courts: 'has_restaurants_courts',
  has_bakery_ice: 'has_bakery_ice',
  has_grocery_supermarkets: 'has_grocery_supermarkets',
  has_banks_atm: 'has_banks_atm',
  has_real_estate: 'has_real_estate',
  has_labs_pharmacies: 'has_labs_pharmacies',
  has_play_fitness: 'has_play_fitness',
  has_swimming_pool: 'has_swimming_pool',
  has_cinema: 'has_cinema',
  office_floors_count: 'office_floors_count',
  offices_count: 'offices_count',
  office_maintenance_fee: 'office_maintenance_fee',
  survey_date: 'survey_date',
  surveyor_name: 'surveyor_name',
  building_survery_remarks: 'building_survery_remarks',
  building_draft: 'building_draft',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FloorsScalarFieldEnum = {
  id: 'id',
  building_id: 'building_id',
  floor_no: 'floor_no',
  floor_type: 'floor_type',
  unit_type: 'unit_type',
  floor_apartments_studio: 'floor_apartments_studio',
  floor_apartments_1_bed: 'floor_apartments_1_bed',
  floor_apartments_2_bed: 'floor_apartments_2_bed',
  floor_apartments_3_bed: 'floor_apartments_3_bed',
  floor_apartments_4_bed: 'floor_apartments_4_bed',
  floor_apartments_5_bed: 'floor_apartments_5_bed',
  floor_apartments_duplex: 'floor_apartments_duplex',
  floor_apartments_penthouse: 'floor_apartments_penthouse',
  floor_has_furnished: 'floor_has_furnished',
  floor_has_semi_furnished: 'floor_has_semi_furnished',
  floor_has_service_apartments: 'floor_has_service_apartments',
  floor_has_hotel_suites_apartments: 'floor_has_hotel_suites_apartments',
  occupancy: 'occupancy',
  size_min: 'size_min',
  size_max: 'size_max',
  avg_sale_price: 'avg_sale_price',
  avg_monthly_rent: 'avg_monthly_rent',
  instalment_plan: 'instalment_plan',
  instalment_period: 'instalment_period',
  down_payment_amount: 'down_payment_amount',
  instalment_amount: 'instalment_amount',
  possession_amount: 'possession_amount',
  date: 'date',
  remarks: 'remarks',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Floors_historyScalarFieldEnum = {
  id: 'id',
  building_id: 'building_id',
  floor_id: 'floor_id',
  floor_no: 'floor_no',
  floor_type: 'floor_type',
  unit_type: 'unit_type',
  floor_apartments_studio: 'floor_apartments_studio',
  floor_apartments_1_bed: 'floor_apartments_1_bed',
  floor_apartments_2_bed: 'floor_apartments_2_bed',
  floor_apartments_3_bed: 'floor_apartments_3_bed',
  floor_apartments_4_bed: 'floor_apartments_4_bed',
  floor_apartments_5_bed: 'floor_apartments_5_bed',
  floor_apartments_duplex: 'floor_apartments_duplex',
  floor_apartments_penthouse: 'floor_apartments_penthouse',
  floor_has_furnished: 'floor_has_furnished',
  floor_has_semi_furnished: 'floor_has_semi_furnished',
  floor_has_service_apartments: 'floor_has_service_apartments',
  floor_has_hotel_suites_apartments: 'floor_has_hotel_suites_apartments',
  occupancy: 'occupancy',
  size_min: 'size_min',
  size_max: 'size_max',
  avg_sale_price: 'avg_sale_price',
  avg_monthly_rent: 'avg_monthly_rent',
  instalment_plan: 'instalment_plan',
  instalment_period: 'instalment_period',
  down_payment_amount: 'down_payment_amount',
  instalment_amount: 'instalment_amount',
  possession_amount: 'possession_amount',
  date: 'date',
  remarks: 'remarks',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SocietiesScalarFieldEnum = {
  id: 'id',
  survey_date: 'survey_date',
  city: 'city',
  type: 'type',
  name: 'name',
  zone: 'zone',
  address: 'address',
  blocks: 'blocks',
  phase: 'phase',
  grade: 'grade',
  occupancy: 'occupancy',
  area: 'area',
  population: 'population',
  launch_year: 'launch_year',
  total_plots_residential: 'total_plots_residential',
  plot_sizes_residential: 'plot_sizes_residential',
  plot_sizes_residential_87_5: 'plot_sizes_residential_87_5',
  plot_sizes_residential_125: 'plot_sizes_residential_125',
  plot_sizes_residential_200: 'plot_sizes_residential_200',
  plot_sizes_residential_250: 'plot_sizes_residential_250',
  plot_sizes_residential_300: 'plot_sizes_residential_300',
  plot_sizes_residential_400: 'plot_sizes_residential_400',
  plot_sizes_residential_500: 'plot_sizes_residential_500',
  plot_sizes_residential_600: 'plot_sizes_residential_600',
  plot_sizes_residential_800: 'plot_sizes_residential_800',
  plot_sizes_residential_1000: 'plot_sizes_residential_1000',
  plot_sizes_residential_2000: 'plot_sizes_residential_2000',
  total_plots_commercial: 'total_plots_commercial',
  plot_sizes_commercial: 'plot_sizes_commercial',
  plot_sizes_commercial_87_5: 'plot_sizes_commercial_87_5',
  plot_sizes_commercial_100: 'plot_sizes_commercial_100',
  plot_sizes_commercial_125: 'plot_sizes_commercial_125',
  plot_sizes_commercial_200: 'plot_sizes_commercial_200',
  plot_sizes_commercial_250: 'plot_sizes_commercial_250',
  plot_sizes_commercial_500: 'plot_sizes_commercial_500',
  plot_sizes_commercial_1000: 'plot_sizes_commercial_1000',
  plot_sizes_commercial_2000: 'plot_sizes_commercial_2000',
  total_apartments: 'total_apartments',
  societies_apartment_size: 'societies_apartment_size',
  apartment_studio: 'apartment_studio',
  apartment_one_bad: 'apartment_one_bad',
  apartment_two_bad: 'apartment_two_bad',
  apartment_three_bad: 'apartment_three_bad',
  apartment_four_bad: 'apartment_four_bad',
  apartment_five_bad: 'apartment_five_bad',
  apartment_penthouse: 'apartment_penthouse',
  apartment_duplex: 'apartment_duplex',
  plot_size: 'plot_size',
  plot_price: 'plot_price',
  vilas_size: 'vilas_size',
  vilas_price: 'vilas_price',
  vilas_monthly_rent: 'vilas_monthly_rent',
  commercial_plot_size: 'commercial_plot_size',
  commercial_plot_price: 'commercial_plot_price',
  apartment_size: 'apartment_size',
  min_apartments_price: 'min_apartments_price',
  max_apartments_price: 'max_apartments_price',
  min_apartments_monthly_rent: 'min_apartments_monthly_rent',
  max_apartments_monthly_rent: 'max_apartments_monthly_rent',
  payment_terms: 'payment_terms',
  instalment_total_amount: 'instalment_total_amount',
  instalment_down_payment: 'instalment_down_payment',
  instalment_possession_Amount: 'instalment_possession_Amount',
  instalment_period: 'instalment_period',
  features_type_parks: 'features_type_parks',
  features_type_school: 'features_type_school',
  features_type_university: 'features_type_university',
  features_type_hospital: 'features_type_hospital',
  features_type_commercial_market: 'features_type_commercial_market',
  features_type_zoo: 'features_type_zoo',
  features_type_food_arena: 'features_type_food_arena',
  features_type_college: 'features_type_college',
  features_type_graveyard: 'features_type_graveyard',
  features_type_grid_station: 'features_type_grid_station',
  features_type_masjid: 'features_type_masjid',
  features_type_community_club: 'features_type_community_club',
  features_type_gated_community: 'features_type_gated_community',
  utilities_type_underground_electrification: 'utilities_type_underground_electrification',
  utilities_type_gas: 'utilities_type_gas',
  utilities_type_water: 'utilities_type_water',
  utilities_type_utilities_electricity: 'utilities_type_utilities_electricity',
  utilities_type_drainage: 'utilities_type_drainage',
  developer_name: 'developer_name',
  contact_no: 'contact_no',
  survery_remarks: 'survery_remarks',
  imagePath: 'imagePath',
  societies_draft: 'societies_draft',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Societies_historyScalarFieldEnum = {
  id: 'id',
  society_id: 'society_id',
  survey_date: 'survey_date',
  city: 'city',
  type: 'type',
  name: 'name',
  zone: 'zone',
  address: 'address',
  blocks: 'blocks',
  phase: 'phase',
  grade: 'grade',
  occupancy: 'occupancy',
  area: 'area',
  population: 'population',
  launch_year: 'launch_year',
  total_plots_residential: 'total_plots_residential',
  plot_sizes_residential: 'plot_sizes_residential',
  plot_sizes_residential_87_5: 'plot_sizes_residential_87_5',
  plot_sizes_residential_125: 'plot_sizes_residential_125',
  plot_sizes_residential_200: 'plot_sizes_residential_200',
  plot_sizes_residential_250: 'plot_sizes_residential_250',
  plot_sizes_residential_300: 'plot_sizes_residential_300',
  plot_sizes_residential_400: 'plot_sizes_residential_400',
  plot_sizes_residential_500: 'plot_sizes_residential_500',
  plot_sizes_residential_600: 'plot_sizes_residential_600',
  plot_sizes_residential_800: 'plot_sizes_residential_800',
  plot_sizes_residential_1000: 'plot_sizes_residential_1000',
  plot_sizes_residential_2000: 'plot_sizes_residential_2000',
  total_plots_commercial: 'total_plots_commercial',
  plot_sizes_commercial: 'plot_sizes_commercial',
  plot_sizes_commercial_87_5: 'plot_sizes_commercial_87_5',
  plot_sizes_commercial_100: 'plot_sizes_commercial_100',
  plot_sizes_commercial_125: 'plot_sizes_commercial_125',
  plot_sizes_commercial_200: 'plot_sizes_commercial_200',
  plot_sizes_commercial_250: 'plot_sizes_commercial_250',
  plot_sizes_commercial_500: 'plot_sizes_commercial_500',
  plot_sizes_commercial_1000: 'plot_sizes_commercial_1000',
  plot_sizes_commercial_2000: 'plot_sizes_commercial_2000',
  total_apartments: 'total_apartments',
  societies_apartment_size: 'societies_apartment_size',
  apartment_studio: 'apartment_studio',
  apartment_one_bad: 'apartment_one_bad',
  apartment_two_bad: 'apartment_two_bad',
  apartment_three_bad: 'apartment_three_bad',
  apartment_four_bad: 'apartment_four_bad',
  apartment_five_bad: 'apartment_five_bad',
  apartment_penthouse: 'apartment_penthouse',
  apartment_duplex: 'apartment_duplex',
  plot_size: 'plot_size',
  plot_price: 'plot_price',
  vilas_size: 'vilas_size',
  vilas_price: 'vilas_price',
  vilas_monthly_rent: 'vilas_monthly_rent',
  commercial_plot_size: 'commercial_plot_size',
  commercial_plot_price: 'commercial_plot_price',
  apartment_size: 'apartment_size',
  min_apartments_price: 'min_apartments_price',
  max_apartments_price: 'max_apartments_price',
  min_apartments_monthly_rent: 'min_apartments_monthly_rent',
  max_apartments_monthly_rent: 'max_apartments_monthly_rent',
  payment_terms: 'payment_terms',
  instalment_total_amount: 'instalment_total_amount',
  instalment_down_payment: 'instalment_down_payment',
  instalment_possession_Amount: 'instalment_possession_Amount',
  instalment_period: 'instalment_period',
  features_type_parks: 'features_type_parks',
  features_type_school: 'features_type_school',
  features_type_university: 'features_type_university',
  features_type_hospital: 'features_type_hospital',
  features_type_commercial_market: 'features_type_commercial_market',
  features_type_zoo: 'features_type_zoo',
  features_type_food_arena: 'features_type_food_arena',
  features_type_college: 'features_type_college',
  features_type_graveyard: 'features_type_graveyard',
  features_type_grid_station: 'features_type_grid_station',
  features_type_masjid: 'features_type_masjid',
  features_type_community_club: 'features_type_community_club',
  features_type_gated_community: 'features_type_gated_community',
  utilities_type_underground_electrification: 'utilities_type_underground_electrification',
  utilities_type_gas: 'utilities_type_gas',
  utilities_type_water: 'utilities_type_water',
  utilities_type_utilities_electricity: 'utilities_type_utilities_electricity',
  utilities_type_drainage: 'utilities_type_drainage',
  developer_name: 'developer_name',
  contact_no: 'contact_no',
  survery_remarks: 'survery_remarks',
  imagePath: 'imagePath',
  societies_draft: 'societies_draft',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommercialScalarFieldEnum = {
  id: 'id',
  survey_date: 'survey_date',
  city: 'city',
  commercial_zone_name: 'commercial_zone_name',
  zone: 'zone',
  type: 'type',
  location: 'location',
  project_status: 'project_status',
  launch_year: 'launch_year',
  grade: 'grade',
  area: 'area',
  occupancy: 'occupancy',
  total_plots: 'total_plots',
  total_shops: 'total_shops',
  total_offices: 'total_offices',
  total_apartments: 'total_apartments',
  property_feature: 'property_feature',
  property_title: 'property_title',
  remarks: 'remarks',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Commercial_historyScalarFieldEnum = {
  id: 'id',
  commercial_id: 'commercial_id',
  survey_date: 'survey_date',
  city: 'city',
  commercial_zone_name: 'commercial_zone_name',
  zone: 'zone',
  type: 'type',
  location: 'location',
  project_status: 'project_status',
  launch_year: 'launch_year',
  grade: 'grade',
  area: 'area',
  occupancy: 'occupancy',
  total_plots: 'total_plots',
  total_shops: 'total_shops',
  total_offices: 'total_offices',
  total_apartments: 'total_apartments',
  property_feature: 'property_feature',
  property_title: 'property_title',
  remarks: 'remarks',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HousesScalarFieldEnum = {
  id: 'id',
  society_id: 'society_id',
  type: 'type',
  size: 'size',
  price: 'price',
  direction: 'direction',
  is_corner: 'is_corner',
  condition: 'condition',
  floors: 'floors',
  has_basement: 'has_basement',
  construction_year: 'construction_year',
  remarks: 'remarks',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlotsScalarFieldEnum = {
  id: 'id',
  society_id: 'society_id',
  date: 'date',
  plot_type: 'plot_type',
  type: 'type',
  size: 'size',
  apartment_size: 'apartment_size',
  apartment_size_ft: 'apartment_size_ft',
  shop_size: 'shop_size',
  office_size: 'office_size',
  plot_price: 'plot_price',
  plot_rent: 'plot_rent',
  banglow_price: 'banglow_price',
  banglow_rent: 'banglow_rent',
  direction: 'direction',
  is_corner: 'is_corner',
  payment_mode: 'payment_mode',
  ins_total_price: 'ins_total_price',
  ins_down_payment: 'ins_down_payment',
  ins_possession_Amount: 'ins_possession_Amount',
  ins_period: 'ins_period',
  remarks: 'remarks',
  imagePath: 'imagePath',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Plots_historyScalarFieldEnum = {
  id: 'id',
  society_id: 'society_id',
  plot_id: 'plot_id',
  date: 'date',
  plot_type: 'plot_type',
  type: 'type',
  size: 'size',
  apartment_size: 'apartment_size',
  apartment_size_ft: 'apartment_size_ft',
  shop_size: 'shop_size',
  office_size: 'office_size',
  plot_price: 'plot_price',
  plot_rent: 'plot_rent',
  banglow_price: 'banglow_price',
  banglow_rent: 'banglow_rent',
  direction: 'direction',
  is_corner: 'is_corner',
  payment_mode: 'payment_mode',
  ins_total_price: 'ins_total_price',
  ins_down_payment: 'ins_down_payment',
  ins_possession_Amount: 'ins_possession_Amount',
  ins_period: 'ins_period',
  remarks: 'remarks',
  imagePath: 'imagePath',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PriceScalarFieldEnum = {
  id: 'id',
  commercial_id: 'commercial_id',
  date: 'date',
  property_type: 'property_type',
  plot_size: 'plot_size',
  building_size: 'building_size',
  total_floor: 'total_floor',
  building_size_sq: 'building_size_sq',
  shop_size: 'shop_size',
  office_size: 'office_size',
  apartment_size: 'apartment_size',
  warehouse_size: 'warehouse_size',
  total_bed: 'total_bed',
  payment_mode: 'payment_mode',
  price: 'price',
  rent: 'rent',
  total_price: 'total_price',
  installment_period: 'installment_period',
  down_payment: 'down_payment',
  possession_amount: 'possession_amount',
  remarks: 'remarks',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Price_historyScalarFieldEnum = {
  id: 'id',
  commercial_id: 'commercial_id',
  price_id: 'price_id',
  date: 'date',
  property_type: 'property_type',
  plot_size: 'plot_size',
  building_size: 'building_size',
  total_floor: 'total_floor',
  building_size_sq: 'building_size_sq',
  shop_size: 'shop_size',
  office_size: 'office_size',
  apartment_size: 'apartment_size',
  warehouse_size: 'warehouse_size',
  total_bed: 'total_bed',
  payment_mode: 'payment_mode',
  price: 'price',
  rent: 'rent',
  total_price: 'total_price',
  installment_period: 'installment_period',
  down_payment: 'down_payment',
  possession_amount: 'possession_amount',
  remarks: 'remarks',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Buildings: 'Buildings',
  Buildings_history: 'Buildings_history',
  Floors: 'Floors',
  Floors_history: 'Floors_history',
  Societies: 'Societies',
  Societies_history: 'Societies_history',
  Commercial: 'Commercial',
  Commercial_history: 'Commercial_history',
  Houses: 'Houses',
  Plots: 'Plots',
  Plots_history: 'Plots_history',
  Price: 'Price',
  Price_history: 'Price_history'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
