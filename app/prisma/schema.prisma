// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//npm i prisma --save-dev
// npm prisma init --datasource-provider mongodb
// npx prisma migrate dev --name init
// npm prisma init

// npx prisma init

// npx prisma db push
// npx prisma generate

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Buildings {
  id                             String    @id @default(auto()) @map("_id") @db.ObjectId
  name                           String
  city                           String
  status                         String?
  is_centrally_air_conditioned   String?
  has_security                   String?
  has_escalators                 String?
  has_food_court                 String?
  has_entertainment_area         String?
  type_mixed_use                 String?
  type_retail                    String?
  type_offices                   String?
  type_apartments                String?
  type_other                     String?
  zone                           String?
  area                           String?
  address                        String?
  plot_size                      Int?
  construction_area              Int?
  construction_year              Int?
  builder_name                   String?
  building_rank                  String?
  total_floors                   Int?
  parking_floors                 Int?
  apartment_floors               Int?
  apartments_count               Int?
  apartments_has_type_1_bed      String?
  apartments_has_type_2_bed      String?
  apartments_has_type_3_bed      String?
  apartments_has_type_4_bed      String?
  apartments_has_type_duplex     String?
  apartments_has_type_penthouse  String?
  apartments_has_servant_quarter String?
  apartments_maintenance_fee     Int?
  retail_floors_count            Int?
  retail_floors_shops_count      Int?
  retail_floors_maintenance_fee  Int?
  retail_floors_brands           String?
  office_floors_count            Int?
  offices_count                  Int?
  office_maintenance_fee         Int?
  survey_date                    DateTime? @db.Date
  surveyor_name                  String?
  building_survery_remarks       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  floors Floors[]
}

model Floors {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  building_id String    @db.ObjectId
  buildings   Buildings @relation(fields: [building_id], references: [id], onDelete: Cascade)

  floor_no            String
  floor_type          String
  unit_type           String?
  occupancy           String?
  size_min            String?
  size_max            String?
  avg_sale_price      String?
  avg_monthly_rent    String?
  instalment_plan     String?
  instalment_period   String?
  down_payment_amount String?
  instalment_amount   String?
  possession_amount   String?
  remarks             String?
}

model Societies {
  id                                         String    @id @default(auto()) @map("_id") @db.ObjectId
  survey_date                                DateTime? @db.Date
  city                                       String
  type                                       String?
  name                                       String?
  zone                                       String?
  address                                    String?
  blocks                                     String?
  grade                                      String?
  occupancy                                  String?
  area                                       String?
  population                                 Int?
  launch_year                                Int?
  total_plots_residential                    Int?
  plot_sizes_residential                     Int?
  total_plots_commercial                     Int?
  plot_sizes_commercial                      Int?
  total_apartments                           Int?
  societies_apartment_size                   Int?
  plot_size                                  Int?
  plot_price                                 Int?
  vilas_size                                 Int?
  vilas_price                                Int?
  vilas_monthly_rent                         Int?
  commercial_plot_size                       Int?
  commercial_plot_price                      Int?
  apartment_size                             Int?
  apartments_price                           Int?
  apartments_monthly_rent                    Int?
  payment_terms                              String?
  features_type_parks                        String?
  features_type_school                       String?
  features_type_university                   String?
  features_type_hospital                     String?
  features_type_commercial_market            String?
  features_type_zoo                          String?
  features_type_food_arena                   String?
  features_type_gated_community              String?
  utilities_type_underground_electrification String?
  utilities_type_gas                         String?
  utilities_type_water                       String?
  utilities_type_utilities_electricity       String?
  utilities_type_drainage                    String?
  developer_name                             String?
  contact_no                                 String?
  survery_remarks                            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Plots  Plots[]
}

model Plots {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  society_id String    @db.ObjectId
  societies  Societies @relation(fields: [society_id], references: [id], onDelete: Cascade)

  type              String
  plot_no           String?
  price             String?
  direction         String?
  is_corner         Boolean?
  size              String?
  instalment_plan   String?
  instalment_period String?

  remarks String?
}


